generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//////////////////////////
// USERS MODULE
//////////////////////////
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  name         String
  phone        String?
  address      String?
  profileImage String?
  role         Role     @default(USER)
  isActive     Boolean  @default(true)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String?
  updatedBy    String?

  orders   Order[]
  payments Payment[]
  carts    Cart[]
}

enum Role {
  USER
  ADMIN
  VENDOR
}

//////////////////////////
// PRODUCTS MODULE (commented tenant)
//////////////////////////
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  category    String?
  tags        Json?
  version     Int      @default(1)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  orderItems OrderItem[]
  inventory  Inventory[]
  cartItems  CartItem[]
}

//////////////////////////
// ORDERS MODULE (no tenant)
//////////////////////////
model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  updatedBy   String?

  user     User        @relation(fields: [userId], references: [id])
  items    OrderItem[]
  payment  Payment?
  shipment Shipment?
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

//////////////////////////
// PAYMENTS MODULE (no tenant)
//////////////////////////
model Payment {
  id        String        @id @default(cuid())
  orderId   String        @unique
  userId    String
  amount    Float
  status    PaymentStatus @default(PENDING)
  method    PaymentMethod
  isDeleted Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  createdBy String?
  updatedBy String?

  order  Order  @relation(fields: [orderId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
}

//////////////////////////
// INVENTORY MODULE (no tenant)
//////////////////////////
model Inventory {
  id        String   @id @default(cuid())
  productId String
  warehouse String
  quantity  Int
  version   Int      @default(1)
  isDeleted Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  createdBy String?
  updatedBy String?

  product Product @relation(fields: [productId], references: [id])
}

//////////////////////////
// CART MODULE (no tenant)
//////////////////////////
model Cart {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Float

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//////////////////////////
// SHIPMENT MODULE
//////////////////////////
model Shipment {
  id             String         @id @default(cuid())
  orderId        String         @unique
  carrier        String
  trackingNumber String
  status         ShipmentStatus @default(PENDING)
  shippedAt      DateTime?
  deliveredAt    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  order Order @relation(fields: [orderId], references: [id])
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}
